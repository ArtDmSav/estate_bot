import re


def f_price(msg):
    r_str = r"((price)?(–µ–≤—Ä–æ)?(c—Ç–æ–∏–º–æ—Å—Ç—å)?(—Ü–µ–Ω–∞)?(–≤)?(–∑–∞)?(–∞—Ä–µ–Ω–¥[–∞—ã])?(euro)?(eur)? ?(–º–µ—Å)?(–º–µ—Å—è—Ü)?[‚Ç¨\-üí∂üí¥:/]? ?" \
            r"\d{1,3}[\.',\s]?\d{3}" \
            r" ?(price)?(–µ–≤—Ä–æ)?(euro)?(eur)?[‚Ç¨\-üí∂üí¥:/]?(c—Ç–æ–∏–º–æ—Å—Ç—å)?(—Ü–µ–Ω–∞)? ?(–≤)?(–∑–∞)?(–∞—Ä–µ–Ω–¥[–∞—ã])? ?(–º–µ—Å)?(–º–µ—Å—è—Ü)?)" \
            r"|((price)?(–µ–≤—Ä–æ)?(c—Ç–æ–∏–º–æ—Å—Ç—å)?(—Ü–µ–Ω–∞)?(–≤)?(–∑–∞)?(–∞—Ä–µ–Ω–¥[–∞—ã])?(euro)?(eur)? ?(–º–µ—Å)?(–º–µ—Å—è—Ü)?[‚Ç¨\-üí∂üí¥:/]? ?" \
            r"\d{3}" \
            r" ?(price)?(–µ–≤—Ä–æ)?(euro)?(eur)?[‚Ç¨\-üí∂üí¥:/]?(c—Ç–æ–∏–º–æ—Å—Ç—å)?(—Ü–µ–Ω–∞)? ?(–≤)?(–∑–∞)?(–∞—Ä–µ–Ω–¥[–∞—ã])? ?(–º–µ—Å)?(–º–µ—Å—è—Ü)?)"
    num = re.findall(r_str, msg)  # –ª–∏—Å—Ç —Å –Ω–∞–π–¥–µ–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ // –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ re.search
    first_numbers = []

    for elem_list in num:  # –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–∏—Å—Ç –±–µ–∑ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
        for elem_str in elem_list:
            if elem_str != '':
                first_numbers.append(elem_str)
    # print('first_number = ', first_numbers)           # —á–µ–∫–∫–∞–µ–º –≥–ª–∞–∑–∞–º–∏ –ø–æ–ª–ª—É—á–µ–Ω—ã–π –ª–∏—Å—Ç –≤ –∫–æ–Ω—Å–æ–ª–∏
    try:  # –ª–æ–≤–∏–º –æ—à–∏–±–∫—É –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è —Ç–∏–ø–æ–≤
        return int(clean_price(first_numbers))  # –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Ç–æ—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    except ValueError:  # –≤—ã–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç -1 –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–æ–π
        # print("exeption: type = str")
        return -1


def clean_price(first_number):
    re_clean_price = r"(\d{1,3}[\.',\s]?\d{3})|(\d{3})"
    flag = True
    second_number = []
    result = []
    for string in first_number:
        for key_w in ["–µ–≤—Ä–æ", "euro", "eur", "‚Ç¨", "üí∂", "üí¥", "price", "—Ü–µ–Ω–∞", "c—Ç–æ–∏–º–æ—Å—Ç—å"]:
            if flag and key_w in string:
                flag = False
                num = re.findall(re_clean_price, string)
                for elem_list in num:
                    for elem_str in elem_list:
                        if elem_str != '':
                            second_number.append(elem_str)
                # print("second number = ", second_number)
                if not second_number:
                    flag = True
                    continue
                flag_2 = True
                for elem in second_number:
                    for ch in [",", ".", " "]:
                        if ch in elem:
                            # print('append result = ', elem.replace(ch, ""))
                            result.append(elem.replace(ch, ""))
                            flag_2 = False
                            break  # —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å continue –¥–ª—è –¥–æ–ø—É—Å–∫–∞ –±–æ–ª–µ–µ 1 —Ü–µ–Ω—ã
                    if flag_2:
                        result.append(elem)
                # print("result = ", result)
                return result[0]
    if flag:
        for string in first_number:
            if re.findall(re_clean_price, string):
                if string != "":
                    second_number.append(string.replace(" ", ""))
        flag = False
        for elem in second_number:
            flag_2 = True
            for ch in [".", ","]:
                if ch in elem:
                    flag_2 = False
                    result.append(elem.replace(ch, ""))
            if flag_2:
                result.append(elem)
        result.sort(reverse=True)
        if not result:
            flag = True
        try:
            return result[0]
        except IndexError:
            # print("except IndexError")
            return -1
